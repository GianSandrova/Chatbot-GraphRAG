services:
  # Layanan Backend
  backend:
    build:
      context: ./Backend
      dockerfile: Dockerfile.backend
    container_name: chatbot-backend
    ports:
      - "8000:8000"
    environment:
      # Variabel untuk koneksi ke Neo4j
      - NEO4J_URI=bolt://neo4j:7687
      - NEO4J_USER=neo4j
      - NEO4J_PASSWORD=12345678
      # Variabel untuk koneksi ke Ollama
      - OLLAMA_HOST=http://ollama:11434
      - GROQ_API_KEY=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
    networks:
      - chatbot-net
    depends_on:
      - neo4j   
      - ollama  
    restart: unless-stopped

  # Layanan Frontend Streamlit
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.frontend
    container_name: chatbot-frontend
    ports:
      - "8501:8501"
    environment:
      - BACKEND_URL=http://backend:8000
    networks:
      - chatbot-net
    depends_on:
      - backend
    restart: unless-stopped

  # Layanan Database Neo4j
  neo4j:
    image: neo4j:5.24-enterprise
    container_name: neo4j-db
    ports:
      - "7474:7474"
      - "7687:7687"
    volumes:
      - neo4j_data:/data
      - ./neo4j_backup:/backups
    environment:
      - NEO4J_AUTH=neo4j/12345678
      - NEO4J_ACCEPT_LICENSE_AGREEMENT=yes
    networks:
      - chatbot-net
    restart: unless-stopped

  ollama:
    image: ollama/ollama:latest
    container_name: ollama-service
    ports:
      - "11434:11434"
    volumes:
      - ollama_data:/root/.ollama
    networks:
      - chatbot-net
    restart: unless-stopped

# Mendefinisikan Jaringan Internal
networks:
  chatbot-net:
    driver: bridge

# Mendefinisikan Volume untuk Penyimpanan Data Persisten
volumes:
  neo4j_data:
  ollama_data: